#!/usr/bin/bash

REPO_ROOT=$(dirname $(realpath $0))
REPO_NAME='personal'

# TODO: parse args to decide which build mode to execute in
# -a --all (default) | -s --single
# -n --normal (default) | -f --force

# export MAKEPKG_CONF="$REPO_ROOT/makepkg.conf"
export PKGDEST="$REPO_ROOT/repo/x86_64"
export PACKAGER="$(git config user.name) <$(git config user.email)>"

build_pkgbuild() {
  dep_check aur
  MAKEPKG_FLAGS=${1:-'-scC'}

  if [ -e $(aur build--pkglist) ]; then
    echo "package build is up to date"
  else
    aur chroot -D $REPO_ROOT/chroot --build
    # makepkg $MAKEPKG_FLAGS
    # remove build products
    # git clean -di
  fi
}

build_all_pkgs() {
  local DIR=$1

  for pkgfile_dir in `find $DIR -mindepth 1 -maxdepth 1 -type d`; do
    pkg=$(basename $pkgfile_dir)
    echo "building $pkg"
    cd "$DIR/$pkg"
    build_pkgbuild
  done
}

build_single_pkg() {
  local DIR=$1
  local PKG_NAME=${2:-''}

  local pkg=$(find $DIR -maxdepth 1 -printf '%P\n' | fzf -1 -0 -q $PKG_NAME)
  if [ -z $pkg ]; then return; fi

  echo "building $pkg"
  cd "$DIR/$pkg"
  build_pkgbuild
}

build_db() {
  cd $PKGDEST
  repo-add "$REPO_NAME.db.tar.gz" *.pkg.tar.zst

  # remove unwanted files
  UNWANTED_FILES=(
    $REPO_NAME.db
    $REPO_NAME.files
    $REPO_NAME.db.tar.gz.old
    $REPO_NAME.files.tar.gz.old
  )

  for p in ${UNWANTED_FILES[@]}; do
    if [ -e $p ]; then
      rm $p
    fi
  done

  # rename databases
  mv $REPO_NAME.db.tar.gz $REPO_NAME.db
  mv $REPO_NAME.files.tar.gz $REPO_NAME.files
}

make_chroot_env() {
  dep_check aur
  dep_check mkarchroot
  mkdir -p $REPO_ROOT/chroot
  aur chroot -D $REPO_ROOT/chroot --makepkg-conf $REPO_ROOT/config/makepkg.conf --pacman-conf $REPO_ROOT/config/pacman.conf --create
}

rm_chroot_env() {
  gio trash $REPO_ROOT/chroot
}



build_all() {
  make_chroot_env
  build_all_pkgs $REPO_ROOT/pkgfiles/personal
  build_all_pkgs $REPO_ROOT/pkgfiles/aur
  build_db
}

build() {
  make_chroot_env
  build_single_pkg $REPO_ROOT/pkgfiles/personal "$@"
  build_single_pkg $REPO_ROOT/pkgfiles/aur "$@"
  # build_db
}

mkchroot() {
  make_chroot_env
}

rmchroot() {
  rm_chroot_env
}


dep_check() {
  cmd=$1
  opt=${2:-true}
  msg="Missing dependency '$cmd'"

  type -p "$cmd" &>/dev/null || {
    notify-send "Scrscn" "$msg"
    echo "$msg"
    if $opt ; then exit 2 ; fi
  }
}

help() {
	cat <<-EOF
Usage: term COMMAND [ARGS...]

Commands:

    build_all         Build all unbuilt and outdated PKGBUILDs in aur and personal
    build [pkgname]   Build a single PKGBUILD in aur and personal
    mkchroot          Make a clean chroot environment and exit
    rmchroot          Trash chroot environment
    help              Print this help text.
EOF
}

default() {
  build_all
}

main() {
  if [ $# -eq 0 ]; then
    default
    exit 0
  fi

  cmd="$1"
  shift

  case "$cmd" in
    rmchroot|mkchroot|build|build_all)
      "$cmd" "$@"
      ;;
    *)
      echo "Unknown command $cmd"
      help
      exit 2
  esac
}

main "$@"
